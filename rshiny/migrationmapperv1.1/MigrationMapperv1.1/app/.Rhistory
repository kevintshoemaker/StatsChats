shapedir<-'D:\\GIS\\projects\\conservationSciencePartners\\disappearingRivers\\data'
samplingPolygons<-readOGR(dsn = shapedir ,layer = 'HUC8_killesStats_simple1020_spatjoinDiv')
samplingPolygons[1,]
samplingPolygons[1,]@bbox
aRasterToSample<-raste('D:\\GIS\\projects\\TWS\\northernCaliforniaLands\\data\\adapwest_climate_velocity\\bwdisp_ensemble_rcp45_20551_prj.tif')
aRasterToSample<-raster('D:\\GIS\\projects\\TWS\\northernCaliforniaLands\\data\\adapwest_climate_velocity\\bwdisp_ensemble_rcp45_20551_prj.tif')
plot(aRasterToSample)
aRasterToSample<-raster('D:\\desktop\\bwdisp_ensemble_rcp45_2055.tif')
aRasterToSample<-raster('D:\\Desktop\\testRaster\\bwdisp_ensemble_rcp45_2055.tif')
plot(aRasterToSample)
tempRaster
for(i in nrow(samplingPolygons)){
theseBounds<-thisFeature@bbox
tempRaster<-mask(aRasterToSample, thisFeature)
writeRaster(tempRaster,paste0(outDirectory,'newRaster',i))
}
for(i in nrow(samplingPolygons)){
thisFeature<-samplingPolygons[i,]
tempRaster<-mask(aRasterToSample, thisFeature)
writeRaster(tempRaster,paste0(outDirectory,'newRaster',i))
}
for(i in nrow(samplingPolygons)){
thisFeature<-samplingPolygons[i,]
tempRaster<-mask(aRasterToSample, thisFeature)
writeRaster(tempRaster,paste0(outDirectory,'newRaster',i,'.tif'))
}
for(i in nrow(samplingPolygons)){
thisFeature<-samplingPolygons[i,]
tempRaster<-mask(aRasterToSample, thisFeature)
writeRaster(tempRaster,paste0(outDirectory,'newRaster',i,'.tif'))
}
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
datesTest
ff<-datesTest$newMasterDate<-format(datesTest$newMasterDate,'%Y-%m-%d %H:%m:%S')
ff
datesTest
table(datesTest)
table(f)
table(ff)
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
datesTest
mortalities
mortTab<-mortalities
mortTab$date_start<-format(mortTab$date_start,'%Y-%m-%d %H:%m:%S')
mortTab$date_end<-format(mortTab$date_end,'%Y-%m-%d %H:%m:%S')
mortTab
mortalities
as.character(mortalities)
?format
selectedTimezone
mortTab<-mortalities
format(mortTab$date_start,'%Y-%m-%d %H:%m:%S')
mortTab$date_start,'%Y-%m-%d %H:%m:%S'
mortTab$date_start
format(mortTab$date_start,'%Y-%m-%d %H:%m:%S',time)
format(mortTab$date_start,'%Y-%m-%d %H:%m:%S')
as.Date(mortTab$date_start,'%Y-%m-%d %H:%m:%S')
as.Date(mortTab$date_start)
as.Date.character(mortTab$date_start)
mortTab$date_start
typeof(mortTab$date_start)
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
mortalities
mortalities
mortalities
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
mortalities
mortTab<-mortalities
mortTab$date_start<-format(mortTab$date_start,'%Y-%m-%d %H:%m:%S')
mortTab$date_end<-format(mortTab$date_end,'%Y-%m-%d %H:%m:%S')
mortTab
mortalities
mortTab<-mortalities
mortTab$date_start<-format(mortTab$date_start,'%Y-%m-%d %h:%m:%s')
mortTab$date_end<-format(mortTab$date_end,'%Y-%m-%d %h:%m:%s')
mortTab
mortTab
mortTab<-mortalities
mortalities
mortTab
date_start<-format(mortTab$date_start,'%Y-%m-%d %h:%m:%s')
format(mortTab$date_start,'%Y-%m-%d %h:%m:%s')
format(mortTab$date_start,'%Y-%m-%d %h:%m:%s')
format(mortTab$date_start,'%Y-%m-%d %H:%m:%s')
format(mortTab$date_start,'%Y-%m-%d %H:%m:%S')
format(mortTab$date_start,'%Y-%m-%d %h:%m:%s')
format(mortTab$date_start,'%Y-%m-%d %H:%m:%S')
format(mortTab$date_start,'%Y-%m-%d %H:%M:%S')
mortalities
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
mortalities
mortTab<-mortalities
mortTab$date_start<-format(mortTab$date_start,'%Y-%m-%d %H:%M:%S')
mortTab$date_end<-format(mortTab$date_end,'%Y-%m-%d %H:%M:%S')
mortalities
mortalities
mortTab
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
year
newDate
newTime
selectedDateTimeElements<-names(validatorObject)
validatorsLength<-length(selectedDateTimeElements)
selectedDateTimeElements
for(j in 1:validatorsLength){
# processingInfo<-paste0(sprintf("%.1f",round((j/(validatorsLength+1)*100),1)),'% ','complete')
# progressIndicator(processingInfo,'update',j/(validatorsLength+1))
# what is the type
### tempDtType<-validatorObject[[validatorValues[[j]]]][1]
tempDtType<-selectedDateTimeElements[j]
# what position is it in this specific column?
tempIndexOfLoc<-as.numeric(validatorObject[[tempDtType]][2])
# lookup the posix type (?necessary?)
tempDtPosixType<-validatorObject[[validatorValues[[j]]]][3]
# which column is it in
tempDtCol<-validatorObject[[tempDtType]][4]
# create a temp vector for this DT element named as such
assign(selectedDateTimeElements[j],importedDatasetMaster@data[,tempDtCol])
# remove all the non numeric characters and spaces and sub
# with commas -- the get command grabs the above variabled named as
# month day year etc etc
tempDateDataObjSplt<-gsub("[^0-9.]",',',get(selectedDateTimeElements[j]))
# split on the commas
tempDateDataObjSplt<-strsplit(tempDateDataObjSplt,",")
# remove the empties
tempDateDataObjSplt<-lapply(tempDateDataObjSplt,function(x){
x[!x ==""]
})
}
j
validatorsLength
selectedDateTimeElements
validatorValues[[j]]
j
validatorValues
validatorValues[[j]]
validatorObject
for(j in 1:validatorsLength){
# processingInfo<-paste0(sprintf("%.1f",round((j/(validatorsLength+1)*100),1)),'% ','complete')
# progressIndicator(processingInfo,'update',j/(validatorsLength+1))
# what is the type
### tempDtType<-validatorObject[[validatorValues[[j]]]][1]
tempDtType<-selectedDateTimeElements[j]
# what position is it in this specific column?
tempIndexOfLoc<-as.numeric(validatorObject[[tempDtType]][2])
# lookup the posix type (?necessary?)
# tempDtPosixType<-validatorObject[[validatorValues[[j]]]][3]
# which column is it in
tempDtCol<-validatorObject[[tempDtType]][4]
# create a temp vector for this DT element named as such
assign(selectedDateTimeElements[j],importedDatasetMaster@data[,tempDtCol])
# remove all the non numeric characters and spaces and sub
# with commas -- the get command grabs the above variabled named as
# month day year etc etc
tempDateDataObjSplt<-gsub("[^0-9.]",',',get(selectedDateTimeElements[j]))
# split on the commas
tempDateDataObjSplt<-strsplit(tempDateDataObjSplt,",")
# remove the empties
tempDateDataObjSplt<-lapply(tempDateDataObjSplt,function(x){
x[!x ==""]
})
}
tempDateDataObjSplt
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
naList<-do.call(rbind, lapply(tempDateDataObjSplt, function(x) is.na(x[tempIndexOfLoc])))
.
tempDtType<-selectedDateTimeElements[j]
selectedDateTimeElements<-names(validatorObject)
validatorsLength<-length(selectedDateTimeElements)
for(j in 1:validatorsLength){
# processingInfo<-paste0(sprintf("%.1f",round((j/(validatorsLength+1)*100),1)),'% ','complete')
# progressIndicator(processingInfo,'update',j/(validatorsLength+1))
# what is the type
### tempDtType<-validatorObject[[validatorValues[[j]]]][1]
tempDtType<-selectedDateTimeElements[j]
# what position is it in this specific column?
tempIndexOfLoc<-as.numeric(validatorObject[[tempDtType]][2])
# lookup the posix type (?necessary?)
# tempDtPosixType<-validatorObject[[validatorValues[[j]]]][3]
# which column is it in
tempDtCol<-validatorObject[[tempDtType]][4]
# create a temp vector for this DT element named as such
assign(selectedDateTimeElements[j],importedDatasetMaster@data[,tempDtCol])
# remove all the non numeric characters and spaces and sub
# with commas -- the get command grabs the above variabled named as
# month day year etc etc
tempDateDataObjSplt<-gsub("[^0-9.]",',',get(selectedDateTimeElements[j]))
# split on the commas
tempDateDataObjSplt<-strsplit(tempDateDataObjSplt,",")
# remove the empties
tempDateDataObjSplt<-lapply(tempDateDataObjSplt,function(x){
x[!x ==""]
})
}
tempDtType<-selectedDateTimeElements[j]
tempDtType
selectedDateTimeElements<-names(validatorObject)
validatorsLength<-length(selectedDateTimeElements)
for(j in 1:validatorsLength){
if(tempDtType=='am/pm'){
next
}
# processingInfo<-paste0(sprintf("%.1f",round((j/(validatorsLength+1)*100),1)),'% ','complete')
# progressIndicator(processingInfo,'update',j/(validatorsLength+1))
# what is the type
### tempDtType<-validatorObject[[validatorValues[[j]]]][1]
tempDtType<-selectedDateTimeElements[j]
# what position is it in this specific column?
tempIndexOfLoc<-as.numeric(validatorObject[[tempDtType]][2])
# lookup the posix type (?necessary?)
# tempDtPosixType<-validatorObject[[validatorValues[[j]]]][3]
# which column is it in
tempDtCol<-validatorObject[[tempDtType]][4]
# create a temp vector for this DT element named as such
assign(selectedDateTimeElements[j],importedDatasetMaster@data[,tempDtCol])
# remove all the non numeric characters and spaces and sub
# with commas -- the get command grabs the above variabled named as
# month day year etc etc
tempDateDataObjSplt<-gsub("[^0-9.]",',',get(selectedDateTimeElements[j]))
# split on the commas
tempDateDataObjSplt<-strsplit(tempDateDataObjSplt,",")
# remove the empties
tempDateDataObjSplt<-lapply(tempDateDataObjSplt,function(x){
x[!x ==""]
})
}
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
columnFieldList
columnFieldList
columnFieldList[1]
columnFieldList[2]
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
selectedDateTimeElements<-names(validatorObject)
validatorsLength<-length(selectedDateTimeElements)
selectedDateTimeElements
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
selectedDateTimeElements<-names(validatorObject)
validatorsLength<-length(selectedDateTimeElements)
selectedDateTimeElements
columnFieldList
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
validatorObjectAmPm
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
selectedDateTimeElements<-names(validatorObject)
validatorsLength<-length(selectedDateTimeElements)
validatorObject
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
validatorObjectAmPm
validatorObjectAmPm
tempIndexOfLoc<-as.numeric(validatorObjectAmPm[[tempDtType]][2])
tempDtCol<-validatorObjectAmPm[[tempDtType]][4]
validatorObjectAmPm
validatorObjectAmPm[1]
validatorObjectAmPm[1][[1]]
validatorObjectAmPm[[1]]
validatorObjectAmPm[[1]]
tempIndexOfLoc<-as.numeric(validatorObjectAmPm[[tempDtType]][2])
tempDtCol<-validatorObjectAmPm[[1]][4]
tempIndexOfLoc<-as.numeric(validatorObjectAmPm[[1]][2])
tempDtCol<-validatorObjectAmPm[[1]][4]
tempDtCol
tempIndexOfLoc
selectedDateTimeElements<-names(validatorObject)
selectedDateTimeElements
assign('ampm',importedDatasetMaster@data[,tempDtCol])
ampm
ampm<<-importedDatasetMaster@data[,tempDtCol]
ampm
tempIndexOfLoc<-as.numeric(validatorObjectAmPm[[1]][2])
tempDtCol<-validatorObjectAmPm[[1]][4]
ampm<<-importedDatasetMaster@data[,tempDtCol]
tempDateDataObjSplt<-gsub("[^0-9.]",',',ampm))
tempDateDataObjSplt<-strsplit(tempDateDataObjSplt,",")
tempDateDataObjSplt<-lapply(tempDateDataObjSplt,function(x){
x[!x ==""]
}
assign(ampm,sapply(tempDateDataObjSplt,"[[",tempIndexOfLoc))
ampm
tempDateDataObjSplt<-gsub("[^0-9.]",',',ampm))
tempDateDataObjSplt<-strsplit(tempDateDataObjSplt,",")
tempIndexOfLoc<-as.numeric(validatorObjectAmPm[[1]][2])
tempDtCol<-validatorObjectAmPm[[1]][4]
ampm<<-importedDatasetMaster@data[,tempDtCol]
tempDateDataObjSplt<-gsub("[^0-9.]",',',ampm)
tempDateDataObjSplt<-strsplit(tempDateDataObjSplt,",")
tempDateDataObjSplt<-lapply(tempDateDataObjSplt,function(x){
x[!x ==""]
}
assign(ampm,sapply(tempDateDataObjSplt,"[[",tempIndexOfLoc))
tempDateDataObjSplt
validtempIndexOfLoc<-as.numeric(validatorObjectAmPm[[1]][2])
tempDtCol<-validatorObjectAmPm[[1]][4]
ampm<<-importedDatasetMaster@data[,tempDtCol]
# tempDateDataObjSplt<-gsub("[^0-9.]",',',ampm)
tempDateDataObjSplt<-gsub('[[:digit:]]+', '', ampm)
tempIndexOfLoc<-as.numeric(validatorObjectAmPm[[1]][2])
tempDtCol<-validatorObjectAmPm[[1]][4]
ampm<<-importedDatasetMaster@data[,tempDtCol]
# tempDateDataObjSplt<-gsub("[^0-9.]",',',ampm)
tempDateDataObjSplt<-gsub('[[:digit:]]+', '', ampm)
tempDateDataObjSplt
tempDateDataObjSplt[1]
'fart dog 111'
j<-'fart dog 111'
gsub('[[:digit:]]+',j)
gsub('[[:digit:]]+','*',j)
gsub('[[f]]+',j)
gsub('[['f']]+',j)
a
j
sub('f.*','*',j)
sub('f','*',j)
sub('f','',j)
sub('f'+,'',j)
sub('[[f]]+','',j)
j
j
gsub("^[f]",'*',j)
gsub("^[f]+",'*',j)
gsub("^[f]-",'*',j)
gsub("[f]",'*',j)
gsub("[-f]",'*',j)
gsub("[f]",'*',j)
gsub("[fd]",'*',j)
gsub("[^fd]",'*',j)
tempDtCol<-validatorObjectAmPm[[1]][4]
ampm<<-importedDatasetMaster@data[,tempDtCol]
ampm
j<<-gsub("[^amp]","",ampm)
j
j<<-gsub("[^amp|AMP]","",ampm)
J
J
j
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
dawgt
dawg
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
ampm
rm(ampm)
ampm
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
names(importedDatasetMaster)
hh<-importedDatasetMaster@data$HOUR2
hh
head(hh)
head(importedDatasetMaster)
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
stop()
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
mappedIndividual
currentIndividual
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
dtvRunning
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
migtime
dude<-progressTracker$migtimeOld
migtime
migtimeOld
ff<-rbind(migtimeOld,migtime)
ff
migtime
ff
migtimeOld
migtime
ff[ff$id_yr==migtimeOld$id_yr]
ff[ff$id_yr==migtimeOld$id_yr,]
migtime
migtimeOld
migtimeOld[migtimeOld$id_yr==migtime$id_yr,]
migtimeOld[migtimeOld$id_yr!=migtime$id_yr,]
migtimeOld[migtimeOld$id_yr==migtime$id_yr,]
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
migtime
names(importedDatasetMaster)
names(importedDatasetMaster)
importedDatasetMaster[importedDatasetMaster$id_yr=='gps361_2010',]
importedDatasetMaster@data[importedDatasetMaster$id_yr=='gps361_2010',]
importedDatasetMaster@data[importedDatasetMaster$id_yr=='gps361_2010',].
importedDatasetMaster@data[importedDatasetMaster$id_yr=='gps361_2010',]
importedDatasetMaster@data[importedDatasetMaster$id_yr=='gps361_2009',]
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
configPageUpdated
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
library(shiny); runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
maxSpeedParameter
mortDistance
mortTime
dawg<-mort.check(importedDatasetMaster@data)
# Function to identify if and when you have mortalies, or
# periods of time when you animal was not moving, given
# a dist (in m) and time (hrs) threshold.
# data must be ordered and have columns dist, id, date, from mov.param()...
mort.check <- function(data=data, dist_thresh = mortDistance, time_thresh = mortTime){
if(inherits(data, "data.frame") != TRUE) stop("data is not a dataframe")
if(any(colnames(data) == "newMasterDate") == FALSE) stop(print("You forgot a date column"))
if(any(colnames(data) == "newUid") == FALSE) stop(print("You forgot a id column"))
if(!inherits(data$newMasterDate, "POSIXct")) stop(print("date column is not POSIXct"))
key <- 1:nrow(data)
key2 <- key[order(data$newUid, data$newMasterDate)]
if(all(key==key2)==FALSE) stop(print("Your data are not ordered correctly"))
if(any(duplicated(data[c("newUid", "newMasterDate")])) == TRUE) stop("You have duplicates in your database")
if(any(is.na(data$newMasterDate) == TRUE)) stop ("You have NAs in your date column")
if(any(is.na(data$newUid) == TRUE)) stop ("You have NAs in your id column")
if(nrow(data[is.na(data$dist)==TRUE,])> length(unique(data$newUid))) warning("You have a lot of NAs in your dist column!!!!!")
#efficiently figure out the consecutive times where animals aren't moving much
dst <- ifelse(data$dist <= dist_thresh, 1, 0)
dst[is.na(dst)==TRUE] <- 0
flag <- c(diff(dst),1)
flag2 <- c(1, diff(dst))
dst[flag==-1 & flag2==1] <- 0
flag3 <- c(1, diff(flag))
dst2 <- ifelse(flag==0 & flag3 == -1, 1, 0)
dst2 <- cumsum(dst2)
dst2[dst==0] <- NA
data$dst2 <- dst2
data$key <- 1:nrow(data)
data <- data[is.na(data$dst2)==FALSE,]
rwsmin <- as.numeric(tapply(data$key, data$dst2, min))
rwsmax <- as.numeric(tapply(data$key, data$dst2, max))
result <- data[data$key %in% rwsmin, c("newUid", "newMasterDate")]
names(result) <- c("newUid","date_start")
result <- cbind(result, data[data$key %in% rwsmax, c("newMasterDate")])
names(result) <- c("newUid","date_start","date_end")
result$mort_time <- as.numeric(difftime(result$date_end,result$date_start,
tz=attr(data$newMasterDate,"tzone"), units="hours"))
result <- result[result$mort_time > time_thresh,]
if(nrow(result)==0){
print("Your data look good given your parameters!")
return(NULL)
}else{
josh<<-result
return(result)
}
}
dawg<-mort.check(importedDatasetMaster@data)
dawg
dim(dawg)
dim(importedDatasetMaster@data)
mortDistance
mortTime
data
runApp('D:/GIS/projects/wyomingMIgrationInitiative/collarProcessingApp/collarProcessingGit/app/MigrationMapperv1.0.r')
